---
import Layout from '../layouts/Layout.astro';

const { cookies, request, redirect } = Astro;
const timestamp = new Date().toISOString();
const clientIP = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';

console.log(`[${timestamp}] LOGIN: Login page accessed from ${clientIP}`);

if (request.method === 'POST') {
  console.log(`[${timestamp}] LOGIN: POST request received from ${clientIP}`);

  try {
    const data = await request.formData();
    const password = data.get('password') as string;

    console.log(`[${timestamp}] LOGIN: Form data parsed, sending authentication request from ${clientIP}`);

    // Send to our Netlify function for authentication
    const response = await fetch(`${Astro.url.origin}/.netlify/functions/authenticate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ password }),
    });

    console.log(`[${timestamp}] LOGIN: Authentication response received: ${response.status} from ${clientIP}`);

    if (response.ok) {
      const { token } = await response.json();

      console.log(`[${timestamp}] LOGIN: Authentication successful, setting cookie for ${clientIP}`);

      // Set the auth token cookie
      cookies.set('auth-token', token, {
        path: '/',
        maxAge: 60 * 60 * 24, // 24 hours
        httpOnly: true,
        secure: true,
        sameSite: 'strict'
      });

      console.log(`[${timestamp}] LOGIN: Cookie set, redirecting to projects page for ${clientIP}`);

      // Redirect to projects page
      return redirect('/projects/project1');
    } else {
      // Handle authentication failure
      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));
      console.error(`[${timestamp}] LOGIN: Authentication failed for ${clientIP}: ${response.status} - ${errorData.error}`);
    }
  } catch (error) {
    console.error(`[${timestamp}] LOGIN: Login error for ${clientIP}:`, error);
  }
}
---

<Layout>
  <div style="max-width: 400px; margin: 50px auto; padding: 20px;">
    <h1>Login Required</h1>
    <p>Please enter the password to access the projects section:</p>

    <form method="post">
      <div style="margin-bottom: 20px;">
        <label for="password" style="display: block; margin-bottom: 5px;">Password:</label>
        <input
          type="password"
          id="password"
          name="password"
          required
          style="width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;"
        />
      </div>

      <button
        type="submit"
        style="background: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; width: 100%;"
      >
        Login
      </button>
    </form>

    <div style="margin-top: 20px;">
      <a href="/" style="text-decoration: none; color: #666;">‚Üê Back to Home</a>
    </div>
  </div>

  <script>
    // Client-side authentication logging
    console.log('[CLIENT] Login page loaded at', new Date().toISOString());

    const form = document.querySelector('form');
    const passwordInput = document.getElementById('password');

    if (form) {
      form.addEventListener('submit', function(e) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] CLIENT: Form submission initiated`);

        if (passwordInput && passwordInput.value) {
          console.log(`[${timestamp}] CLIENT: Password field has value, submitting form`);
        } else {
          console.log(`[${timestamp}] CLIENT: Password field is empty`);
        }
      });
    }

    // Log page visibility changes
    document.addEventListener('visibilitychange', function() {
      const timestamp = new Date().toISOString();
      if (document.hidden) {
        console.log(`[${timestamp}] CLIENT: Login page hidden`);
      } else {
        console.log(`[${timestamp}] CLIENT: Login page visible`);
      }
    });

    // Log when user focuses on password field
    if (passwordInput) {
      passwordInput.addEventListener('focus', function() {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] CLIENT: Password field focused`);
      });

      passwordInput.addEventListener('blur', function() {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] CLIENT: Password field blurred`);
      });
    }
  </script>
</Layout>